import logging
import pytz
import json
import aiosqlite
from datetime import date, timedelta
from telegram import Bot
from telegram.error import Forbidden
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ (–ü–û–ü–´–¢–ö–ê 5, –§–ò–ù–ê–õ–¨–ù–ê–Ø) ---
# –ú—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º "—Ñ–∞–±—Ä–∏–∫—É" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
from kerykeion.factory import AstrologicalSubjectFactory

from config import BOT_TOKEN
from constants import DB_JOBS, RUSSIAN_SIGNS, DB_HOROSCOPES
from database import get_user_data, save_user_data
from horoscope_fetcher import get_horoscope_from_db

logger = logging.getLogger(__name__)
bot = Bot(token=BOT_TOKEN)
scheduler = AsyncIOScheduler(jobstores={'default': SQLAlchemyJobStore(url=DB_JOBS)})

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø (–ù–ê AstrologicalSubjectFactory) ---
async def cache_daily_transits():
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∏—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –∫—ç—à (–ë–î).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç kerykeion (v1.0.0+).
    """
    try:
        logger.info("[–ö–≠–®–ï–†]: –ù–∞—á–∏–Ω–∞—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É "–∑–∞–≤—Ç—Ä–∞"
        tomorrow_date = date.today() + timedelta(days=1)
        
        # 2. –°–æ–∑–¥–∞–µ–º "—Ñ–∞–±—Ä–∏–∫—É" –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤.
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –õ–æ–Ω–¥–æ–Ω (UTC) –∏ 12:00 –¥–Ω—è –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç.
        factory = AstrologicalSubjectFactory(
            name="Transits", 
            day=tomorrow_date.day, 
            month=tomorrow_date.month, 
            year=tomorrow_date.year, 
            hour=12, 
            minute=0, 
            city="London", 
            nation="UK"
        )
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç ("—Å—É–±—ä–µ–∫—Ç")
        subject = factory.get_subject()

        # 4. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
        planet_data = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏—è 10 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç
        planets = ['sun', 'moon', 'mercury', 'venus', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune', 'pluto']
        for p_name in planets:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º getattr, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å subject.sun, subject.moon –∏ —Ç.–¥.
            planet_obj = getattr(subject, p_name) 
            planet_data[p_name.capitalize()] = { # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã (Sun, Moon)
                "sign": planet_obj.sign,       # –ó–Ω–∞–∫ (–Ω–∞–ø—Ä., 'Aries')
                "lon": round(planet_obj.lon, 2) # –ì—Ä–∞–¥—É—Å –≤ –∑–Ω–∞–∫–µ
            }
            
        # 5. –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        data_json = json.dumps(planet_data)
        
        async with aiosqlite.connect(DB_HOROSCOPES) as db:
            await db.execute(
                "INSERT OR REPLACE INTO transits_cache (transit_date, planet_data) VALUES (?, ?)",
                (tomorrow_date, data_json)
            )
            await db.commit()
            
        logger.info(f"[–ö–≠–®–ï–†]: –¢—Ä–∞–Ω–∑–∏—Ç—ã –Ω–∞ {tomorrow_date} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã (kerykeion v1+).")
        
    except Exception as e:
        logger.error(f"[–ö–≠–®–ï–†]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤: {e}", exc_info=True)
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---


def get_pytz_timezone(tz_str: str):
    """–£–õ–£–ß–®–ï–ù–ò–ï: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ UTC –≤ –æ–±—ä–µ–∫—Ç pytz."""
    if tz_str == "UTC+0":
        return pytz.timezone("Etc/GMT")
    
    sign = tz_str[3]
    offset = int(tz_str[4:])
    # Etc/GMT –∏–º–µ–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –∑–Ω–∞–∫: Etc/GMT-3 —ç—Ç–æ UTC+3
    flipped_sign = '-' if sign == '+' else '+'
    return pytz.timezone(f"Etc/GMT{flipped_sign}{offset}")

def format_horoscope_message(horoscope_data, sign_name, h_type_rus):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
    sign_name_rus = RUSSIAN_SIGNS.get(sign_name, sign_name)
    
    if not horoscope_data or not horoscope_data.get('general_text'):
        return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, {h_type_rus} –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ {sign_name_rus} –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    horoscope_date = horoscope_data['date']
    
    if h_type_rus == '–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π':
        date_display = horoscope_date.strftime('%d.%m.%Y')
    elif h_type_rus == '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π':
        date_display = f"–Ω–µ–¥–µ–ª—é —Å {horoscope_date.strftime('%d.%m.%Y')}"
    elif h_type_rus == '–µ–∂–µ–º–µ—Å—è—á–Ω—ã–π':
        date_display = horoscope_date.strftime('%Y-%m')
    elif h_type_rus == '–≥–æ–¥–æ–≤–æ–π':
        date_display = f"{horoscope_date.year} –≥–æ–¥"
    else:
        date_display = horoscope_date.strftime('%Y-%m-%d')
        
    message_parts = [
        f"üîÆ *{h_type_rus.capitalize()} –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ {sign_name_rus} –Ω–∞ {date_display}*\n",
        f"*{horoscope_data.get('general_text', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.')}*\n"
    ]

    sections = {
        "business": f"üíº *–ë–∏–∑–Ω–µ—Å ({horoscope_data.get('business_rating', '-')})*",
        "health": f"üí™ *–ó–¥–æ—Ä–æ–≤—å–µ ({horoscope_data.get('health_rating', '-')})*",
        "love": f"‚ù§Ô∏è *–õ—é–±–æ–≤—å ({horoscope_data.get('love_rating', '-')})*",
        "lunar": f"üåô *–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ({horoscope_data.get('lunar_rating', '-')})*"
    }

    for key, title in sections.items():
        text_key = f"{key}_text"
        if horoscope_data.get(text_key):
            message_parts.append(f"{title}\n{horoscope_data[text_key]}\n")
            
    return "\n".join(message_parts)

async def send_daily_horoscope_job(user_id: int):
    try:
        user = await get_user_data(user_id)
        if not user or not user.get('is_active') or not user.get('zodiac_sign'): return
        
        horoscope = await get_horoscope_from_db(user['zodiac_sign'], 'daily')
        message = format_horoscope_message(horoscope, user['zodiac_sign'], '–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π')
        
        await bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {user_id}")
    except Forbidden:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è.")
        await save_user_data(user_id, is_active=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {user_id}: {e}", exc_info=True)

def update_user_jobs(user_id: int, tz: str, time: str):
    job_id = f'daily_{user_id}'
    hour, minute = map(int, time.split(':'))
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
    scheduler.add_job(
        send_daily_horoscope_job, 'cron', hour=hour, minute=minute,
        timezone=get_pytz_timezone(tz), id=job_id, args=[user_id]
    )
    logger.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {tz} {time}")
