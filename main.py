import logging
import asyncio
import nest_asyncio
import os
from telegram import Update, BotCommand
from telegram.ext import (
    Application, CommandHandler, CallbackContext,
    CallbackQueryHandler, ConversationHandler
)
from warnings import filterwarnings
from telegram.warnings import PTBUserWarning

filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)

nest_asyncio.apply()

from config import BOT_TOKEN
from keyboards import *
from database import init_user_db, get_user_data, save_user_data
from scheduler import scheduler, update_user_jobs, format_horoscope_message
from horoscope_fetcher import get_horoscope_from_db

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

SETUP_ZODIAC, SETUP_TIMEZONE, SETUP_TIME = range(3)
SETTINGS_ROOT, SETTINGS_ZODIAC, SETTINGS_TIMEZONE, SETTINGS_TIME = range(3, 7)

async def start_command(update: Update, context: CallbackContext):
    try:
        user = update.effective_user
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user.id} ({user.username})")

        user_info = {
            "first_name": user.first_name,
            "last_name": user.last_name,
            "username": user.username,
            "language_code": user.language_code,
            "is_premium": getattr(user, 'is_premium', False)
        }
        await save_user_data(user.id, **user_info)

        user_data_db = await get_user_data(user.id)
        if user_data_db and user_data_db.get('zodiac_sign'):
            await update.message.reply_text("‚ú®–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
            return ConversationHandler.END

        await update.message.reply_html(f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø.")
        await update.message.reply_text("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=get_zodiac_keyboard())
        return SETUP_ZODIAC
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def show_main_menu(update: Update, context: CallbackContext, text: str = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"):
    try:
        logger.info("–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=get_main_menu_keyboard())
        else:
            await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_main_menu: {e}", exc_info=True)
        return ConversationHandler.END

async def stop_command(update: Update, context: CallbackContext):
    try:
        user_id = update.effective_user.id
        await save_user_data(user_id, is_active=False)
        job_id = f'daily_{user_id}'
        if scheduler.get_job(job_id):
            scheduler.remove_job(job_id)
        await update.message.reply_text("üõë –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stop_command: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def subscribe_command(update: Update, context: CallbackContext):
    try:
        user_id = update.effective_user.id
        user = await get_user_data(user_id)
        if user and user.get('timezone') and user.get('notification_time'):
            await save_user_data(user_id, is_active=True)
            update_user_jobs(user_id, user['timezone'], user['notification_time'])
            await update.message.reply_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ subscribe_command: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def setup_select_zodiac(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        await query.answer()
        sign = query.data.split('_')[1]
        await save_user_data(update.effective_user.id, zodiac_sign=sign)
        await query.edit_message_text("–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=get_timezone_keyboard())
        return SETUP_TIMEZONE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ setup_select_zodiac: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

async def setup_select_timezone(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        await query.answer()
        tz = query.data.split('_')[1]
        await save_user_data(update.effective_user.id, timezone=tz)
        await query.edit_message_text("–®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=get_time_keyboard())
        return SETUP_TIME
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ setup_select_timezone: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

async def setup_select_time(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        await query.answer()
        time = query.data.split('_')[1]
        user_id = update.effective_user.id
        await save_user_data(user_id, notification_time=time)
        user = await get_user_data(user_id)
        update_user_jobs(user_id, user['timezone'], time)
        await query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ setup_select_time: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

async def cancel_setup(update: Update, context: CallbackContext):
    try:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_setup: {e}", exc_info=True)
        return ConversationHandler.END

# –û—Å—Ç–∞–ª—å–Ω—ã–µ handlers –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ try-except –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –æ–ø—É—â—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –ü–æ–ª–Ω—ã–π –∫–æ–¥ —Å –Ω–∏–º–∏.

async def main():
    if not os.path.exists('data'): os.makedirs('data')
    await init_user_db()
    
    scheduler.start()

    application = Application.builder().token(BOT_TOKEN).concurrent_updates(True).build()  # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ False –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã persist

    commands = [
        BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("menu", "üìñ –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("subscribe", "üîî –í–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand("stop", "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    ]
    await application.bot.set_my_commands(commands)

    # ConversationHandlers –∏ add_handler –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        await application.run_polling(drop_pending_updates=True)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        try:
            await application.stop()
        except RuntimeError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ application.stop(): {e}")
            
        scheduler.shutdown()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    asyncio.run(main())
