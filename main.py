import logging
import asyncio
import nest_asyncio
import os
from telegram import Update, BotCommand
from telegram.ext import (
    Application, CommandHandler, CallbackContext,
    CallbackQueryHandler, ConversationHandler
)
from warnings import filterwarnings
from telegram.warnings import PTBUserWarning

filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)

nest_asyncio.apply()

from config import BOT_TOKEN
from keyboards import *
from database import init_user_db, get_user_data, save_user_data
from scheduler import scheduler, update_user_jobs, format_horoscope_message
from horoscope_fetcher import get_horoscope_from_db

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
SETUP_ZODIAC, SETUP_TIMEZONE, SETUP_TIME = range(3)
SETTINGS_ROOT, SETTINGS_ZODIAC, SETTINGS_TIMEZONE, SETTINGS_TIME = range(3, 7)

# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

async def start_command(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    user = update.effective_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user.id} ({user.username})")

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = {
        "first_name": user.first_name,
        "last_name": user.last_name,
        "username": user.username,
        "language_code": user.language_code,
        "is_premium": getattr(user, 'is_premium', False)
    }
    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await save_user_data(user.id, **user_info)

    user_data_db = await get_user_data(user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É (–≤—ã–±—Ä–∞–ª –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞)
    if user_data_db and user_data_db.get('zodiac_sign'):
        await update.message.reply_text("‚ú®–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END
    
    await update.message.reply_html(f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø.")
    await update.message.reply_text("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=get_zodiac_keyboard())
    return SETUP_ZODIAC

async def show_main_menu(update: Update, context: CallbackContext, text: str = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    logger.info("–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=get_main_menu_keyboard())
    else:
        await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())
    return ConversationHandler.END

# –ù–æ–≤–æ–µ: –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
async def stop_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    await save_user_data(user_id, is_active=False)
    job_id = f'daily_{user_id}'
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
    await update.message.reply_text("üõë –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe.")
    
async def subscribe_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user = await get_user_data(user_id)
    if user and user.get('timezone') and user.get('notification_time'):
        await save_user_data(user_id, is_active=True)
        update_user_jobs(user_id, user['timezone'], user['notification_time'])
        await update.message.reply_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start.")

# === –î–ò–ê–õ–û–ì –ù–ê–°–¢–†–û–ô–ö–ò ===

async def setup_select_zodiac(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    sign = query.data.split('_')[1]
    await save_user_data(update.effective_user.id, zodiac_sign=sign)
    await query.edit_message_text("–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=get_timezone_keyboard())
    return SETUP_TIMEZONE

async def setup_select_timezone(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    tz = query.data.split('_')[1]
    await save_user_data(update.effective_user.id, timezone=tz)
    await query.edit_message_text("–®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=get_time_keyboard())
    return SETUP_TIME

async def setup_select_time(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    time = query.data.split('_')[1]
    user_id = update.effective_user.id
    await save_user_data(user_id, notification_time=time)
    user = await get_user_data(user_id)
    update_user_jobs(user_id, user['timezone'], time)
    await query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã.", reply_markup=get_main_menu_keyboard())
    return ConversationHandler.END

async def cancel_setup(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# === –ù–ê–°–¢–†–û–ô–ö–ò ===

async def settings_start(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=get_settings_menu_keyboard())
    return SETTINGS_ROOT

async def settings_ask_zodiac(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=get_zodiac_keyboard(is_settings=True))
    return SETTINGS_ZODIAC

async def settings_save_zodiac(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    sign = query.data.split('_')[1]
    await save_user_data(update.effective_user.id, zodiac_sign=sign)
    await query.edit_message_text("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–∑–º–µ–Ω–µ–Ω. –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=get_settings_menu_keyboard())
    return SETTINGS_ROOT

async def settings_ask_timezone(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=get_timezone_keyboard(is_settings=True))
    return SETTINGS_TIMEZONE

async def settings_save_timezone(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    tz = query.data.split('_')[1]
    user_id = update.effective_user.id
    await save_user_data(user_id, timezone=tz)
    user = await get_user_data(user_id)
    update_user_jobs(user_id, tz, user['notification_time'])
    await query.edit_message_text("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω–µ–Ω. –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=get_settings_menu_keyboard())
    return SETTINGS_ROOT

async def settings_ask_time(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=get_time_keyboard(is_settings=True))
    return SETTINGS_TIME

async def settings_save_time(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    time = query.data.split('_')[1]
    user_id = update.effective_user.id
    await save_user_data(user_id, notification_time=time)
    user = await get_user_data(user_id)
    update_user_jobs(user_id, user['timezone'], time)
    await query.edit_message_text("–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ. –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=get_settings_menu_keyboard())
    return SETTINGS_ROOT

# === –ü–û–õ–£–ß–ï–ù–ò–ï –ì–û–†–û–°–ö–û–ü–ê ===

async def get_now_handler(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞:", reply_markup=get_horoscope_type_keyboard())

async def horoscope_type_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    h_type = query.data.split('_')[2]
    user_id = update.effective_user.id
    user = await get_user_data(user_id)
    if not user or not user.get('zodiac_sign'):
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –≤ /start.")
        return
    horoscope = await get_horoscope_from_db(user['zodiac_sign'], h_type)
    h_type_rus = {'daily': '–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π', 'weekly': '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π', 'monthly': '–µ–∂–µ–º–µ—Å—è—á–Ω—ã–π', 'yearly': '–≥–æ–¥–æ–≤–æ–π'}.get(h_type, h_type)
    message = format_horoscope_message(horoscope, user['zodiac_sign'], h_type_rus)
    await query.edit_message_text(message, parse_mode='Markdown', reply_markup=get_main_menu_keyboard())

async def help_handler(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    help_text = """
    ‚ùì *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*
    
    - /start: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.
    - /menu: –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    - /subscribe: –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    - /stop: –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    
    –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:
    - üîÆ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø.
    - ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –ò–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞–∫, –ø–æ—è—Å –∏–ª–∏ –≤—Ä–µ–º—è.
    """
    await update.callback_query.edit_message_text(help_text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard())

async def main():
    if not os.path.exists('data'): os.makedirs('data')
    await init_user_db()
    
    scheduler.start()

    application = Application.builder().token(BOT_TOKEN).concurrent_updates(True).build()

    commands = [
        BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("menu", "üìñ –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("subscribe", "üîî –í–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand("stop", "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    ]
    await application.bot.set_my_commands(commands)

    setup_conv = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            SETUP_ZODIAC: [CallbackQueryHandler(setup_select_zodiac, pattern='^zodiac_')],
            SETUP_TIMEZONE: [CallbackQueryHandler(setup_select_timezone, pattern='^tz_')],
            SETUP_TIME: [CallbackQueryHandler(setup_select_time, pattern='^time_')]
        },
        fallbacks=[CallbackQueryHandler(cancel_setup, pattern=f'^{CbData.CANCEL}$')],
        per_message=False
    )
    
    settings_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(settings_start, pattern=f'^{CbData.SETTINGS}$')],
        states={
            SETTINGS_ROOT: [
                CallbackQueryHandler(settings_ask_zodiac, pattern=f'^{CbData.CHANGE_ZODIAC}$'),
                CallbackQueryHandler(settings_ask_timezone, pattern=f'^{CbData.CHANGE_TIMEZONE}$'),
                CallbackQueryHandler(settings_ask_time, pattern=f'^{CbData.CHANGE_TIME}$')
            ],
            SETTINGS_ZODIAC: [
                CallbackQueryHandler(settings_save_zodiac, pattern='^zodiac_'),
                CallbackQueryHandler(settings_start, pattern=f'^{CbData.SETTINGS}$')
            ],
            SETTINGS_TIMEZONE: [
                CallbackQueryHandler(settings_save_timezone, pattern='^tz_'),
                CallbackQueryHandler(settings_start, pattern=f'^{CbData.SETTINGS}$')
            ],
            SETTINGS_TIME: [
                CallbackQueryHandler(settings_save_time, pattern='^time_'),
                CallbackQueryHandler(settings_start, pattern=f'^{CbData.SETTINGS}$')
            ]
        },
        fallbacks=[CallbackQueryHandler(show_main_menu, pattern=f'^{CbData.BACK_TO_MAIN}$')],
        per_message=False
    )

    application.add_handler(setup_conv)
    application.add_handler(settings_conv)
    
    application.add_handler(CallbackQueryHandler(get_now_handler, pattern=f'^{CbData.GET_NOW}$'))
    application.add_handler(CallbackQueryHandler(help_handler, pattern=f'^{CbData.HELP}$'))
    
    application.add_handler(CallbackQueryHandler(horoscope_type_handler, pattern='^h_type_'))
    application.add_handler(CommandHandler('menu', lambda u, c: u.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())))
    
    # –ù–æ–≤–æ–µ: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è /stop –∏ /subscribe
    application.add_handler(CommandHandler('stop', stop_command))
    application.add_handler(CommandHandler('subscribe', subscribe_command))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        await application.run_polling(drop_pending_updates=True)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        try:
            await application.stop()
        except RuntimeError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ application.stop(): {e}")
            
        scheduler.shutdown()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    asyncio.run(main())
